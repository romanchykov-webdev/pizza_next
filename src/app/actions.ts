"use server";

import { CheckoutFormValues } from "@/components/shared/checkout/checkout-form-schema";
import { OrderStatus, Prisma } from "@prisma/client";
import { cookies } from "next/headers";

import { stripe } from "@/lib/stripe";
import { sendTelegramMessage } from "@/lib/telegram";
import type { Stripe } from "stripe";
import { prisma } from "../../prisma/prisma-client";

import { mapPizzaTypes } from "@/constants/pizza";
import { calcCatItemTotalPrice } from "@/lib/calc-cart-item-total-price";
import { getUserSession } from "@/lib/get-user-session";
import { hashSync } from "bcrypt";
import { CartItemDTO } from "../../services/dto/cart.dto";

// const APP_URL = process.env.NEXT_PUBLIC_API_BASE_URL ?? "http://localhost:3000";
// const APP_URL = process.env.NEXT_PUBLIC_API_BASE_URL ?? "https://pizza-next-neon.vercel.app";
const APP_URL =
	process.env.NEXT_PUBLIC_API_BASE_URL ??
	(process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : "http://localhost:3000");

const VAT_PERCENT = 5; // –ù–î–°, %
const DELIVERY_EUR = 12; // –î–æ—Å—Ç–∞–≤–∫–∞,

// —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
export async function createOrder(data: CheckoutFormValues) {
	try {
		const cookisStore = await cookies();

		const cartToken = cookisStore.get("cartToken")?.value;

		if (!cartToken) {
			throw new Error("Cart token not found");
		}

		// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
		const cart = await prisma.cart.findFirst({
			where: { tokenId: cartToken },
			include: {
				items: {
					include: {
						productItem: {
							include: { product: true },
						},
						ingredients: true,
					},
				},
			},
		});

		if (!cart) throw new Error("Cart not found");
		if (!cart.items.length || cart.totalAmount <= 0) throw new Error("Cart is empty");

		// –°—á–∏—Ç–∞–µ–º –Ω–∞ –°–ï–†–í–ï–†–ï (–≤ —Ü–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
		const itemsCents = Math.round(cart.totalAmount * 100);
		const taxCents = Math.round((itemsCents * VAT_PERCENT) / 100);
		const deliveryCents = Math.round(DELIVERY_EUR * 100);
		const grandCents = itemsCents + taxCents + deliveryCents;

		// –°–æ–∑–¥–∞—ë–º Order –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
		const order = await prisma.order.create({
			data: {
				tokenId: cartToken,
				totalAmount: Math.round(grandCents / 100),
				status: OrderStatus.PENDING,
				// items: JSON.stringify(cart.items),
				items: cart.items,
				fullName: `${data.firstname ?? ""} ${data.lastname ?? ""}`.trim(),
				email: data.email ?? "",
				phone: data.phone,
				address: data.address,
				comment: data.comment ?? "",
			},
		});

		// –°–æ–±–∏—Ä–∞–µ–º line_items –¥–ª—è Stripe (–ø—Ä–∏–º–µ—Ä: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—â–∞—è)
		// –í–∞—Ä–∏–∞–Ω—Ç –ê: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
		const line_items: Stripe.Checkout.SessionCreateParams.LineItem[] = [
			{
				quantity: 1,
				price_data: {
					currency: "eur", // –≤–∞–ª—é—Ç–∞
					// unit_amount: cart.totalAmount * 100, // —Å—É–º–º–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö!
					unit_amount: grandCents,
					product_data: {
						name: `–ó–∞–∫–∞–∑ #${order.id}`,
						description: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤ Next Pizza",
					},
				},
			},
		];
		// –í–∞—Ä–∏–∞–Ω—Ç –ë (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ–∑–∏—Ü–∏—è–º–∏):
		// const line_items = [
		//   { quantity: 1, price_data: { currency: "eur", unit_amount: itemsCents,    product_data: { name: "–¢–æ–≤–∞—Ä—ã" } } },
		//   { quantity: 1, price_data: { currency: "eur", unit_amount: taxCents,      product_data: { name: `–ù–∞–ª–æ–≥ ${VAT_PERCENT}%` } } },
		//   { quantity: 1, price_data: { currency: "eur", unit_amount: deliveryCents, product_data: { name: "–î–æ—Å—Ç–∞–≤–∫–∞" } } },
		// ];

		const session = await stripe.checkout.sessions.create({
			mode: "payment",
			line_items,
			success_url: `${APP_URL}/success?session_id={CHECKOUT_SESSION_ID}`,
			cancel_url: `${APP_URL}/failed`,
			metadata: {
				orderId: String(order.id),
				cartToken,
			},
		});

		return session.url ?? null;
	} catch (error) {
		console.log("[CREATE_ORDER] Server error", error);
		return null;
	}
}

//  –∑–∞–∫–∞–∑ –±–µ–∑ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã (–æ–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É) Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
export async function createCashOrder(data: CheckoutFormValues) {
	try {
		const cookieStore = await cookies();
		const cartToken = cookieStore.get("cartToken")?.value;

		if (!cartToken) throw new Error("Cart token not found");

		const cart = await prisma.cart.findFirst({
			where: { tokenId: cartToken },
			include: {
				items: {
					include: {
						productItem: { include: { product: true } },
						ingredients: true,
					},
				},
			},
		});

		if (!cart) throw new Error("Cart not found");
		if (!cart.items.length || cart.totalAmount <= 0) throw new Error("Cart is empty");

		const itemsCents = Math.round(cart.totalAmount * 100);
		const taxCents = Math.round((itemsCents * VAT_PERCENT) / 100);
		const deliveryCents = Math.round(DELIVERY_EUR * 100);
		const grandCents = itemsCents + taxCents + deliveryCents;

		const order = await prisma.order.create({
			data: {
				tokenId: cartToken,
				totalAmount: Math.round(grandCents / 100),
				status: OrderStatus.PENDING, // –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
				//
				items: cart.items,
				fullName: `${data.firstname ?? ""} ${data.lastname ?? ""}`.trim(),
				email: data.email ?? "",
				phone: data.phone,
				address: data.address,
				comment: data.comment ?? "",
				paymentId: "COD", // –º–µ—Ç–∫–∞, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –∫—É—Ä—å–µ—Ä—É
			},
		});

		// –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
		const lines: string[] = [];
		for (const it of cart.items) {
			const qty = it.quantity ?? 1;
			const name = it.productItem?.product?.name ?? "–¢–æ–≤–∞—Ä";
			const size = (it.pizzaSize ?? it.productItem?.size) ? ` (${it.pizzaSize ?? it.productItem?.size} —Å–º)` : "";

			// —Ç–∏–ø —Ç–µ—Å—Ç–∞: –±–µ—Ä—ë–º –∏–∑ item.type, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–∑ productItem.pizzaType
			const doughType = it.type ?? it.productItem?.pizzaType;
			const doughName = doughType ? mapPizzaTypes[doughType as keyof typeof mapPizzaTypes] : undefined;
			const doughLine = doughName ? `, —Ç–µ—Å—Ç–æ: ${doughName}` : "";

			const ing = (it.ingredients ?? []).map((x) => x.name).filter(Boolean);
			const ingLine = ing.length ? `\n  + –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${ing.join(", ")}` : "";

			// —Å—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–∑–∞ + –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã) * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			const itemSum = calcCatItemTotalPrice(it as CartItemDTO);

			lines.push(`${qty} x ${name}${size}${doughLine}${ingLine} - ${itemSum} z≈Ç`);
		}

		const msg: string[] = [
			"üõµ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É)",
			`‚Ññ${order.id}`,
			`–°—É–º–º–∞: ‚Ç¨${(grandCents / 100).toFixed(2)}`,
			"",
			"–°–æ—Å—Ç–∞–≤:",
			...lines.map((l) => `‚Ä¢ ${l}`),
			"",
			`–ö–ª–∏–µ–Ω—Ç: ${order.fullName}`,
			`–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}`,
			`Email: ${order.email}`,
			`–ê–¥—Ä–µ—Å: ${order.address}`,
			`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment || "-"}`,
		];

		await sendTelegramMessage(msg.join("\n"));

		// –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
		await clearCart(cartToken);

		return { success: true, orderId: order.id };
	} catch (error) {
		console.error("[CREATE_CASH_ORDER] Server error", error);
		return { success: false };
	}
}

//  —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–∞—è
export async function clearCart(cartToken?: string) {
	try {
		// –ï—Å–ª–∏ cartToken –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—É–∫–∏
		if (!cartToken) {
			const cookieStore = await cookies();
			cartToken = cookieStore.get("cartToken")?.value;
		}

		if (!cartToken) {
			console.log("[CLEAR_CART] Cart token not found");
			return { success: false, error: "Cart token not found" };
		}

		// –ü–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã
		const cart = await prisma.cart.findFirst({
			where: { tokenId: cartToken },
			select: { id: true },
		});

		if (!cart) {
			console.log("[CLEAR_CART] Cart not found for token:", cartToken);
			return { success: false, error: "Cart not found" };
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
		const deleteResult = await prisma.cartItem.deleteMany({
			where: { cartId: cart.id },
		});
		console.log("[CLEAR_CART] Deleted items count:", deleteResult.count);

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã
		await prisma.cart.update({
			where: { id: cart.id },
			data: { totalAmount: 0 },
		});
		console.log("[CLEAR_CART] Cart total amount reset for cart:", cart.id);

		return { success: true };
	} catch (error) {
		console.error("[CLEAR_CART] Error:", error);
		return {
			success: false,
			error: error instanceof Error ? error.message : "Unknown error",
		};
	}
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export async function updateUserInfo(body: Prisma.UserUpdateInput) {
	try {
		const currentUser = await getUserSession();

		if (!currentUser) {
			throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω");
		}

		const findUser = await prisma.user.findFirst({
			where: {
				id: Number(currentUser.id),
			},
		});

		await prisma.user.update({
			where: {
				id: Number(currentUser.id),
			},
			data: {
				fullName: body.fullName,
				email: body.email,
				password: body.password ? hashSync(body.password as string, 10) : findUser?.password,
			},
		});
	} catch (err) {
		console.log("Error [UPDATE_USER]", err);
		throw err;
	}
}

// —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUser(body: Prisma.UserCreateInput) {
	try {
		const user = await prisma.user.findFirst({
			where: {
				email: body.email,
			},
		});

		if (user) {
			if (!user.verified) {
				throw new Error("–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
			}

			throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
		}

		// const createdUser = await prisma.user.create({
		// 	data: {
		// 		...body,
		// 		password: hashSync(body.password, 10),
		// 	},
		// });

		// –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
		const createdUser = await prisma.user.create({
			data: {
				fullName: body.fullName,
				email: body.email,
				password: hashSync(body.password, 10),
				// verified: new Date(),
				// provider: "credentials",
				// providerId: undefined,
			},
		});

		// const code = Math.floor(100000 + Math.random() * 900000).toString();

		// await prisma.verificationCode.create({
		// 	data: {
		// 		code,
		// 		userId: createdUser.id,
		// 		expiresAt: new Date(Date.now() + 10 * 60 * 1000),
		// 	},
		// });

		// console.log(createdUser);

		// const html = `
		// <p>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <h2>${code}</h2></p>
		// <p><a href="http://localhost:3000/api/auth/verify?code=${code}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a></p>
		// `;

		// await sendEmail(createdUser.email, "Next Pizza / –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", html);

		return { success: true, userId: createdUser.id };
	} catch (error) {
		console.log("Error [CREATE_USER]", error);
		return {
			success: false,
			error: error instanceof Error ? error.message : "Unknown error",
		};
	}
}
